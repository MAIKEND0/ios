import Foundation
import SwiftUI

class CalendarExcelGenerator {
    private let viewModel: ChefManagementCalendarViewModel
    private let dateRange: (start: Date, end: Date)
    private let includeDetails: Bool
    private let includeWorkerInfo: Bool
    
    init(viewModel: ChefManagementCalendarViewModel,
         dateRange: (start: Date, end: Date),
         includeDetails: Bool,
         includeWorkerInfo: Bool) {
        self.viewModel = viewModel
        self.dateRange = dateRange
        self.includeDetails = includeDetails
        self.includeWorkerInfo = includeWorkerInfo
    }
    
    func generateExcel() async throws -> URL {
        // For now, generate a CSV file that can be opened in Excel
        // In the future, this could be replaced with a proper Excel library
        return try await generateCSVAsExcel()
    }
    
    private func generateCSVAsExcel() async throws -> URL {
        let tempDirectory = FileManager.default.temporaryDirectory
        let fileName = "KSR_Calendar_\(formatDateForFileName(dateRange.start))_\(formatDateForFileName(dateRange.end)).csv"
        let fileURL = tempDirectory.appendingPathComponent(fileName)
        
        // Get content from MainActor context
        let csvContent = await generateCSVContent()
        
        // Write to file
        try csvContent.write(to: fileURL, atomically: true, encoding: .utf8)
        
        print("ðŸ“Š [Excel] Generated calendar CSV for Excel: \(fileName)")
        return fileURL
    }
    
    @MainActor
    private func generateCSVContent() -> String {
        var csv = ""
        
        // Header row
        csv += "Date,Time,Event Type,Title,Description,Priority,Status,Location,Required Operators,Assigned Workers\n"
        
        // Get events in date range
        let events = getEventsInDateRange().sorted { $0.date < $1.date }
        
        // Add event rows
        for event in events {
            let dateStr = DateFormatter.userFriendly.string(from: event.date)
            let timeStr = formatTime(event.date)
            let title = escapeCSVField(event.title)
            let description = escapeCSVField(event.description)
            let location = "" // No location field in the model
            
            // Get resource requirements
            var requiredOperators = "0"
            var assignedWorkers = "0"
            
            if !event.resourceRequirements.isEmpty {
                // Sum up all worker counts from resource requirements
                requiredOperators = "\(event.resourceRequirements.reduce(0) { $0 + $1.workerCount })"
                // Can't determine assigned from this model
                assignedWorkers = "N/A"
            }
            
            csv += "\(dateStr),\(timeStr),\(event.type.displayName),\(title),\(description),\(event.priority.displayName),\(event.status.displayName),\(location),\(requiredOperators),\(assignedWorkers)\n"
        }
        
        // Add worker availability section if requested
        if includeWorkerInfo {
            csv += "\n\nWORKER AVAILABILITY\n"
            csv += "Worker Name,Role,Status,Utilization %,Weekly Hours,Projects,Tasks,On Leave\n"
            
            if let matrix = viewModel.workerAvailabilityMatrix {
                for worker in matrix.workers {
                    let name = escapeCSVField(worker.worker.name)
                    let role = worker.worker.role
                    let status = worker.worker.isActive ? "Active" : "Inactive"
                    let utilization = Int(worker.weeklyStats.utilization * 100)
                    let weeklyHours = String(format: "%.1f", worker.weeklyStats.totalHours)
                    let projects = worker.weeklyStats.projectCount
                    let tasks = worker.weeklyStats.taskCount
                    // Check if worker has low utilization (might indicate leave)
                    let onLeave = worker.weeklyStats.utilization < 0.1 ? "Possibly" : "No"
                    
                    csv += "\(name),\(role),\(status),\(utilization),\(weeklyHours),\(projects),\(tasks),\(onLeave)\n"
                }
            }
            
            // Add summary statistics
            csv += "\n\nSUMMARY STATISTICS\n"
            if let summary = viewModel.calendarSummary {
                csv += "Metric,Value\n"
                csv += "Total Events,\(summary.totalEvents)\n"
                csv += "Available Workers,\(summary.availableWorkers)\n"
                csv += "Workers on Leave,\(summary.workersOnLeave)\n"
                csv += "Capacity Utilization,\(String(format: "%.0f", summary.capacityUtilization * 100))%\n"
                csv += "Conflict Count,\(summary.conflictCount)\n"
                csv += "Upcoming Deadlines,\(summary.upcomingDeadlines)\n"
            }
        }
        
        csv += "\n\nGenerated by KSR Cranes Management System on \(DateFormatter.userFriendly.string(from: Date()))\n"
        
        return csv
    }
    
    @MainActor
    private func getEventsInDateRange() -> [ManagementCalendarEvent] {
        return viewModel.filteredEvents.filter { event in
            event.date >= dateRange.start && event.date <= dateRange.end
        }
    }
    
    private func escapeCSVField(_ field: String) -> String {
        // Escape quotes and wrap in quotes if contains comma, newline, or quotes
        let escaped = field.replacingOccurrences(of: "\"", with: "\"\"")
        if field.contains(",") || field.contains("\n") || field.contains("\"") {
            return "\"\(escaped)\""
        }
        return escaped
    }
    
    private func formatTime(_ date: Date) -> String {
        let formatter = DateFormatter()
        formatter.timeStyle = .short
        return formatter.string(from: date)
    }
    
    private func formatDateForFileName(_ date: Date) -> String {
        let formatter = DateFormatter()
        formatter.dateFormat = "yyyy-MM-dd"
        return formatter.string(from: date)
    }
}